A*(B^-1)
B*T(A)
B*t(A)
B*A
A = matrix(c(1, 2, 4, 2, 1, 7, 3, 6, 2, 2, 4, 5), 3, 4)
B = matrix(c(1, 0, 2, 1, 3, 1, 4, 5, 5, 3, 7, 1, 2, 4, 3, 2), 4, 4)
B*A
B A
B
A
B*A
B*t(A)
B %*% t(A)
B %*% t(A)
matrix(c(1,2), 1, 2)
matrix(c(3,4), 2, 1)
matrix(c(1,2), 1, 2) %*% matrix(c(3,4), 2, 1)
A %*% (B^-1)
(B^-1)
solve(B)
A %*% solve(B)
summary(stack.loss)
hist(stack.loss)
boxplot(stack.loss)
shapiro.test(stack.loss)
qqnorm(stack.loss)
View(B)
lastNames <- read.table("~/Projects/Learning-R/01-intro/lastNames.txt", quote="\"")
View(lastNames)
lastNames <- read.table("./lastNames.txt", quote="\"")
lastNames <- read.table("./lastNames.txt", quote="\"")
lastNames <- read.table(".lastNames.txt", quote="\"")
lastNames <- read.table("../lastNames.txt", quote="\"")
lastNames <- read.table("lastNames.txt", quote="\"")
lastNames <- read.table("~/Projects/Learning-R/01-intro/lastNames.txt", quote="\"")
rbinom(20, 15, 0.2)
plot(x, ppois(x, 1))
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1))
plot(x, ppois(x, 1), type="s", ylab="F(x)", main="Poisson(1) CDF")
x <- seq(-0.01, 5, 0.001)
plot(x, ppois(x, 1), type="s", ylab="F(x)", main="Poisson(1) CDF")
x <- seq(-0.01, 5, 1)
plot(x, ppois(x, 1), type="s", ylab="F(x)", main="Poisson(1) CDF")
plot(x, ppois(x, 4))
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 4))
x <- seq(-0.01, 5, 0.1)
plot(x, ppois(x, 4))
x <- seq(-0.01, 5, 1)
plot(x, ppois(x, 4))
x <- seq(-0.1, 5, 1)
plot(x, ppois(x, 4))
x <- seq(-1, 5, 1)
plot(x, ppois(x, 4))
x <- seq(0, 5, 1)
plot(x, ppois(x, 4))
qgamma(0.20, 2, 10)
sample <- rnorm(100)
sample
plot(x,x);
plot(sample, sample);
data <- c(8480, 608, 10498, 3653, 1872, 1374, 14138, 7478, 5794, 4019)
boxplot(data);
mean(data)
sd(data)
summary(data)
pbias(data)
bias(data)
bias(data)
data(spainfoot)
library("plspm")
data(spainfoot)
View(spainfoot)
View(spainfoot)
head(spainfoot, n=6)
din(spainfoot)
dim(spainfoot)
tail(spainfoot, n=6)
data(spainfoot)
summary(spainfoot)
names(spainfoot)
boxplot(spainfoot)
boxplot(spainfoot$GSH)
head(spainfoot, n=6)
hist(spainfoot$GSH)
stem(spainfoot%GSH)
stem(spainfoot$GSH)
attach(spainfoot)
dim(spainfoot)
Attack = c(0, 0, 0)
Defense = c(0, 0, 0)
Success = c(0, 0, 0)
foot_inner = rbind(Attack, Defense, Success)
foot_inner = rbind(Attack, Defense, Success)
foot_inder
foot_inner
Success = c(1, 1, 0)
foot_inner = rbind(Attack, Defense, Success)
foot_inner
colNames(foot_inner) = rownames(foot_inner)
colnames(foot_inner) = rownames(foot_inner)
innerplot(foot_inner)
foot_outer = list(1:4, 5:8, 9:12)
View(foot_inner)
View(foot_inner)
View(spainfoot)
View(spainfoot)
foot_modes = c("A", "A", "A")
foot_pls = plspm(spainfoot, foot_inner, foot_outer, foot_modes)
summary(foot_pls)
foot_pls$path_coefs
foot_pls$inner_model
foot_pls$inner_summary
plot(foot_pls)
plot(foot_pls, what="loadings")
plot(foot_pls, what="weights")
head(foot_pls$scores)
tail(foot_pls$scores)
foot_outer2 = list(1:4, c(-1*5, -1*6, 7, 8), 9:12)
foot_modes2 = c("A", "A", "A")
foot_inner2 = rbind(Attack, Defense, Success)
colnames(foot_inner2) = rownames(foot_inner2)
foot_outer2 = list(1:4, c(5, 6, -1*7, -1*8), 9:12)
foot_modes2 = c("A", "A", "A")
foot_pls2 = plspm(spainfoot, foot_inner2, foot_outer2, foot_modes2)
foot_pls2 = plspm(spainfoot, foot_inner2, foot_outer2, foot_modes2)
foot_inner2 = rbind(Attack, Defense, Success)
summary(foot_pls2)
foot_pls2 = plspm(spainfoot, foot_inner2, foot_outer2, foot_modes2)
data(spainfoot)
foot_outer2 = list(1:4, c(5, 6, -1*7, -1*8), 9:12)
foot_modes2 = c("A", "A", "A")
foot_pls2 = plspm(spainfoot, foot_inner2, foot_outer2, foot_modes2)
foot_outer2 = list(1:4, c(5, 6, 7, 8), 9:12)
foot_modes2 = c("A", "A", "A")
foot_pls2 = plspm(spainfoot, foot_inner2, foot_outer2, foot_modes2)
summary(foot_pls2)
foot_outer2 = list(1:4, c(5, 6, 7*(-1), 8*(-1)), 9:12)
foot_pls2 = plspm(spainfoot, foot_inner2, foot_outer2, foot_modes2)
foot_outer2 = list(1:4, 5:8, 9:12)
foot_outer2[5]
foot_outer2[[5]]
foot_outer2
foot_outer2[2]
spainfoot[6]
spainfoot[6] *= -1
spainfoot[6] = spainfoot[6] * -1
spainfoot[6]
spainfoot[5] = spainfoot[5] * -1
spainfoot2 = spainfoot
spainfoot[5] = spainfoot[5] * -1
spainfoot[6] = spainfoot[6] * -1
foot_pls2 = plspm(spainfoot2, foot_inner2, foot_outer2, foot_modes2)
plot(foot_pls2, what="loadings")
spainfoot[5] = spainfoot[5] * -1
spainfoot[6] = spainfoot[6] * -1
spainfoot[6]
spainfoot[6] = spainfoot[6] * -1
spainfoot[5]
spainfoot[5] = spainfoot[5] * -1
spainfoot[5]
spainfoot[6]
plot(foot_pls2, what="weights")
plot(foot_pls2)
foot_pls2$path_coefs
foot_pls2$inner_model
mask = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
spainfoot2*mask
spainfoot*mask
mask = c(1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1)
spainfoot*mask
mask = c(1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1)
spainfoot*mask
mask = c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
spainfoot*mask
spainfoot
spainfoot*mask
mask = c(1, 1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
spainfoot*mask
spainfoot*c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
spainfoot*t(c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
spainfoot*t(c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1))
spainfoot*c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
t(spainfoot)*c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
t(t(spainfoot)*c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1))
mark = c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
foot_pls2  = plspm(t(t(spainfoot)*mask), foot_inner2, foot_outer2, foot_modes2)
foot_pls2  = plspm(t(t(spainfoot)*mask)), foot_inner2, foot_outer2, foot_modes2)
foot_pls2  = plspm(t(t(spainfoot)*mask), foot_inner2, foot_outer2, foot_modes2)
mark = c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
foot_pls2  = plspm(t(t(spainfoot)*mask), foot_inner2, foot_outer2, foot_modes2)
foot_pls2  = plspm(t(t(spainfoot)*c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)), foot_inner2, foot_outer2, foot_modes2)
mask = c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
foot_pls2  = plspm(t(t(spainfoot)*mask), foot_inner2, foot_outer2, foot_modes2)
spainfoot2[5] = spainfoot2[5] * -1
spainfoot2[6] = spainfoot2[6] * -1
spainfoot2
spainfoot2 = spainfoot
spainfoot2[5] = spainfoot2[5] * -1
spainfoot2[6] = spainfoot2[6] * -1
spainfoot2
data(spainfoot)
# Display data
head(spainfoot, n=6)
dim(spainfoot)
tail(spainfoot, n=6)
names(spainfoot)
# Basic plots
boxplot(spainfoot$GSH)
hist(spainfoot$GSH)
stem(spainfoot$GSH)
# Basic stats
summary(spainfoot)
# Build the model
Attack  = c(0, 0, 0)
Defense = c(0, 0, 0)
Success = c(1, 1, 0)
# Matrix created by row binding
foot_inner = rbind(Attack, Defense, Success)
foot_inner
colnames(foot_inner) = rownames(foot_inner)
# plot the inner matrix
innerplot(foot_inner)
# define list of indicators
foot_outer = list(1:4, 5:8, 9:12)
# Tell variables are reflexive
foot_modes = c("A", "A", "A")
# run plspm analysis
foot_pls = plspm(spainfoot, foot_inner, foot_outer, foot_modes)
# summarized results
summary(foot_pls)
# Show results
foot_pls$path_coefs
foot_pls$inner_model
foot_pls$inner_summary
plot(foot_pls)
plot(foot_pls, what="loadings")
plot(foot_pls, what="weights")
# Show best teams
head(foot_pls$scores)
# Show worst teams
tail(foot_pls$scores)
# GCA and GCH are inverse, more goals on defense are
# worst for success!!!
# We need to change the model...
# Matrix created by row binding
foot_inner2 = rbind(Attack, Defense, Success)
colnames(foot_inner2) = rownames(foot_inner2)
# Redefine list of indicators
foot_outer2 = list(1:4, 5:8, 9:12)
# Tell variables are reflexive
foot_modes2 = c("A", "A", "A")
# Change symbol
spainfoot2 = spainfoot
spainfoot2[5] = spainfoot2[5] * -1
spainfoot2[6] = spainfoot2[6] * -1
foot_pls2  = plspm(spainfoot2, foot_inner2, foot_outer2, foot_modes2)
# run plspm analysis
mask = c(1,1,1,1,-1,-1,1,1,1,1,1,1,1,1)
foot_pls2  = plspm(t(t(spainfoot)*mask), foot_inner2, foot_outer2, foot_modes2)
# summarized results
summary(foot_pls2)
# Show results
foot_pls2$path_coefs
foot_pls2$inner_model
foot_pls2$inner_summary
plot(foot_pls2)
plot(foot_pls2, what="loadings")
plot(foot_pls2, what="weights")
# Show best teams
head(foot_pls$scores)
# Show worst teams
tail(foot_pls$scores)
foot_pls2  = plspm(t(t(spainfoot)*mask), foot_inner2, foot_outer2, foot_modes2)
foot_pls2$path_coefs
foot_pls2$inner_model
foot_pls2$inner_summary
plot(foot_pls2)
plot(foot_pls2, what="loadings")
library("plspm")
library("plsdepot")
library("corrplot")
# Load data
setwd("/Users/manuelmhtr/Projects/TweetsImpactPrediction/PLSPM");
list.files("./data")
tweetsRaw = read.csv("./data/tweetsSummary_v4.0newSet.csv")
head(tweetsRaw)
# Filter useless data
# tweets = subset(tweetsRaw, select=-c(id, userIdStr, twitterIdStr, messageIsDirect, postHourOfDay, postDayOfWeek))
# Normalizagin data (Inverting data where higher is worst)
tweets = subset(tweetsRaw, select=c(id))
tweets$messageReach            = (tweetsRaw$messageIsDirect) * tweetsRaw$messageMentionsCount + (1 - tweetsRaw$messageIsDirect) * (tweetsRaw$userFollowersCount) + 1
tweets$messageReachRatio       = 1 - 1 / ((tweets$messageReach / 10000) + 1)
tweets$clicksRatio             = 1 - 1 / ((tweetsRaw$clicksCount / 20) + 1)
tweets$retweetsRatio           = 1 - 1 / ((tweetsRaw$retweetsCount / 10) + 1)
tweets$favoritesRatio          = 1 - 1 / ((tweetsRaw$favoritesCount / 10) + 1)
tweets$userKloutLevel          = tweetsRaw$userKloutScore / 100
tweets$userMozLevel            = tweetsRaw$userMozScore   / 100
tweets$messageHasMedia         = tweetsRaw$messageHasMedia
tweets$userFollowersRatio      = 1 - 1 / ((tweetsRaw$userFollowersCount / 10000) + 1)
tweets$userListedRatio         = 1 - 1 / ((tweetsRaw$userListedCount / 500) + 1)
tweets$userVerified            = tweetsRaw$userVerified
tweets$id = NULL
summary(tweets);
M <- cor(tweets)
corrplot.mixed(M, tl.pos="lt")
?corrplot.mixed
# Tests for normalizagin data
originalVar = tweetsRaw$retweetsCount
summary(originalVar);
boxplot(originalVar)
hist(originalVar)
checkingVar = 1 - 1 / ((1 * originalVar / 10) + 1)
summary(checkingVar);
boxplot(checkingVar)
hist(checkingVar, breaks=20)
hist(tweets$messageReachRatio)
# Display data
head(tweets, n=6)
dim(tweets)
names(tweets)
# Basic plots
# Number of clicks
boxplot(tweets$clicksCount)
hist(tweets$clicksCount)
# Followers count
boxplot(tweets$userFollowersCount)
hist(tweets$userFollowersCount)
# Followers count
boxplot(tweets$userFollowFriendRatio)
hist(tweets$userFollowFriendRatio)
# CTR
boxplot(tweets$clicksCount*100 / max(tweets$userFollowersCount,1))
hist(tweets$clicksCount*100 / tweets$userFollowersCount)
# CPA analysis
help(prcomp)
tweetsPca = prcomp(tweets, center = TRUE, scale. = TRUE)
tweetsPca$rotation
tweetsRotationAbs = abs(tweetsPca$rotation)
tweetsRotationAbs
plot(tweetsPca, type = "l")
names(tweets)
# GET PRINCIPAL COMPONENTS:
# 1: messageReachRatio, userKloutScore, userMozScore, userFollowersCount, userListedCount,
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
audience_cols = c(2,6,7,9,10);
plot(nipals(tweets[,audience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
# 2: favoritesRatio, retweetsRatio, clicksRatio
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC2"]),2]
impact_cols = c(3,4,5);
plot(nipals(tweets[,impact_cols]), main = "Impact indicators (circle of correlations)", cex.main = 1)
# 3: messageHasMedia, userVerified
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
messageContent_cols = c(8,11);
plot(nipals(tweets[,messageContent_cols]), main = "Message content indicators (circle of correlations)", cex.main = 1)
# Building inner model
MessageContent = c(0, 0, 0);
Audience       = c(0, 0, 0);
Impact         = c(1, 1, 0);
# Matrix created by row binding
tweetsInner = rbind(MessageContent, Audience, Impact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(messageContent_cols, audience_cols, impact_cols)
# Tell variables are reflexive or formative
tweetsModes = rep("A", 3)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=100)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
summary(tweets);
M <- cor(tweets)
corrplot.mixed(M, tl.pos="lt")
library(ISRL)
install.packages("ISRL")
install.packages("ISLR")
library(ISLR)
head(smarket)
head(Smarket)
head(Smarket)
Smarket
dim(Smarket)
summary(Smarket)
library("corrplot")
M <- cor(Smarket)
M <- cor(Smarket[,1:8])
corrplot.mixed(M, tl.pos="lt")
Smarket[,1:8]
plot(Smarket$volumen)
plot(Smarket$volume)
plot(Smarket$Volume)
plot(Smarket$Today)
plot(Smarket$Today, type="l")
par(mar=c(6, 4, 4, 2) + 0.1)
plot(Smarket$Today, type="l")
plot(Smarket)
cor(par(mar=c(6, 4, 4, 2) + 0.1))
cor(Smarket[,1:8])
glm.fit = glm(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2+Smarket$Lag3+Smarket$Lag4+Smarket$Lag5+Smarket$Volume, data=Smarket, family=binomial)
plot(glm.fit)
plot(glm.fit)
summary(glm.fit)
glm.prob = predit(glm.fit, type="response")
glm.prob = predict(glm.fit, type="response")
plot(glm.prob)
glm.prob[1:10]
contrast(Smarket$Volumen)
contrasts(Smarket$Volumen)
contrasts(Smarket$Direction)
glm.pred = rep("Down", 1250);
glm.pred[glm.prob > 0.5] = "Up";
glm.pred = rep("Down", dim(Smarket[1]));
glm.pred = rep("Down", dim(Smarket)[1]);
glm.pred[glm.prob > 0.5] = "Up";
table(glm.pred, Smarket$Direction)
# How accurate is the predicction?
mean(glm.pred == Smarket$Direction)
100 - mean(glm.pred == Smarket$Direction)
1 - mean(glm.pred == Smarket$Direction)
Smarket.2005 = Smarket[!train,]
train = (Year < 2005)
Smarket.2005 = Smarket[!train,]
train = (Smarket$Year < 2005)
Smarket.2005 = Smarket[!train,]
dim(Smarket.2005)
Direction.2005 = Smarket$Direction[!train]
glm.fit = glm(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2+Smarket$Lag3+Smarket$Lag4+Smarket$Lag5+Smarket$Volume, data=Smarket, family=binomial, subset=train)
glm.fit.2005 = glm(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2+Smarket$Lag3+Smarket$Lag4+Smarket$Lag5+Smarket$Volume, data=Smarket, family=binomial, subset=train)
glm.prob.2005 = predict(glm.fit.2005, Smarket.2005, type="response") #test
glm.fit.2005 = glm(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2+Smarket$Lag3+Smarket$Lag4+Smarket$Lag5+Smarket$Volume, data=Smarket, family=binomial, subset=train)
glm.prob.2005 = predict(glm.fit.2005, Smarket.2005, type="response") #test
glm.fit.2005 = glm(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2+Smarket$Lag3+Smarket$Lag4+Smarket$Lag5+Smarket$Volume, data=Smarket, family=binomial, subset=!train)
glm.prob.2005 = predict(glm.fit.2005, Smarket.2005, type="response") #test
glm.fit.2005 = glm(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2+Smarket$Lag3+Smarket$Lag4+Smarket$Lag5+Smarket$Volume, data=Smarket.2005, family=binomial, subset=train)
glm.prob.2005 = predict(glm.fit.2005, Smarket.2005, type="response") #test
glm.fit.2005 = glm(Smarket.2005$Direction ~ Smarket.2005$Lag1+Smarket.2005$Lag2+Smarket.2005$Lag3+Smarket.2005$Lag4+Smarket.2005$Lag5+Smarket.2005$Volume, data=Smarket.2005, family=binomial, subset=train)
glm.prob.2005 = predict(glm.fit.2005, Smarket.2005, type="response") #test
glm.pred.2005 = rep("Down", dim(Smarket.2005)[1]);
table(glm.pred.2005)
glm.pred.2005[glm.prob.2005 > 0.5] = "Up"
table(glm.pred.2005)
train = (Smarket$Year < 2005)
Smarket.2005 = Smarket[!train,]
dim(Smarket.2005)
Direction.2005 = Smarket.2005$Direction[!train]
# Train again, using subset of train
glm.fit.2005 = glm(Smarket.2005$Direction ~ Smarket.2005$Lag1+Smarket.2005$Lag2+Smarket.2005$Lag3+Smarket.2005$Lag4+Smarket.2005$Lag5+Smarket.2005$Volume, data=Smarket.2005, family=binomial, subset=train)
glm.prob.2005 = predict(glm.fit.2005, Smarket.2005, type="response") #test
glm.pred.2005 = rep("Down", dim(Smarket.2005)[1]);
glm.pred.2005[glm.prob.2005 > 0.5] = "Up"
table(glm.pred.2005)
glm.fit.simp = glm(Smarket.2005$Direction ~ Smarket.2005$Lag1+Smarket.2005$Lag2, data=Smarket.2005, family=binomial, subset=train)
glm.prob.simp = predict(glm.fit.simp, Smarket.2005, type="response") #test
glm.pred.simp = rep("Down", dim(Smarket.2005)[1]);
glm.pred.simp[glm.prob.2005 > 0.5] = "Up"
table(glm.pred.simp)
train = (Smarket$Year < 2005)
Smarket.2005 = Smarket[!train,]
dim(Smarket.2005)
head(Smarket.2005)
Direction.2005 = Smarket.2005$Direction[!train]
glm.fit.2005 = glm(Smarket.2005$Direction ~ Smarket.2005$Lag1+Smarket.2005$Lag2+Smarket.2005$Lag3+Smarket.2005$Lag4+Smarket.2005$Lag5+Smarket.2005$Volume, data=Smarket.2005, family=binomial, subset=train)
glm.prob.2005 = predict(glm.fit.2005, Smarket.2005, type="response") #test
glm.pred.2005 = rep("Down", dim(Smarket.2005)[1]);
glm.pred.2005[glm.prob.2005 > 0.5] = "Up"
table(glm.pred.2005)
glm.fit.2005 = glm(Smarket.2005$Direction ~ Smarket.2005$Lag1+Smarket.2005$Lag2+Smarket.2005$Lag3+Smarket.2005$Lag4+Smarket.2005$Lag5+Smarket.2005$Volume, data=Smarket.2005, family=binomial, subset=train)
glm.prob.2005 = predict(glm.fit.2005, Smarket.2005, type="response") #test
glm.pred.2005 = rep("Down", dim(Smarket.2005)[1]);
glm.pred.2005[glm.prob.2005 > 0.5] = "Up"
table(glm.pred.2005)
library(MASS)
lda.fit = lda(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2, data=Smarket, family=binomial)
train = (Smarket$Year < 2005)
lda.fit = lda(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2, data=Smarket, family=binomial, subset=train)
summary(lda.fit)
plot(lda.fit)
library(MASS)
library(ISLR)
lda.fit = lda(Smarket)
train = (Smarket$Year < 2005)
train = (Smarket$Year < 2005)
# Logistic regression
lda.fit = lda(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2, data=Smarket, family=binomial, subset=train)
# P-value should be lower than a significance leve (a=)
summary(lda.fit)
plot(lda.fit)
lda.fit = lda(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2, data=Smarket, subset=train)
# P-value should be lower than a significance leve (a=)
summary(lda.fit)
plot(lda.fit)
Smarket.2005 = Smarket[!train,]
lda.pred = predict(lda.fit, Smarket.2005)
lda.pred = predict(lda.fit, Smarket)
lda.class = lda.pred$class
table(lda.class, Smarket$Direction)
table(lda.class, Smarket$Direction)
mean(lda.class==Smarket$Direction)
qda.fit = qda(Smarket$Direction ~ Smarket$Lag1+Smarket$Lag2, data=Smarket, subset=train)
# P-value should be lower than a significance leve (a=)
summary(qda.fit)
plot(qda.fit)
qda.pred = predict(qda.fit, Smarket)
qda.pred = predict(qda.fit, Smarket)
summary(qda.fit)
plot(qda.fit)
qda.pred = predict(qda.fit, Smarket)
qda.class = qda.pred$class
table(qda.class, Smarket$Direction)
mean(qda.class==Smarket$Direction)
