# Normalizagin data (Inverting data where higher is worst)
tweets$userDefaultProfile      = 1 - tweets$userDefaultProfile
tweets$userDefaultProfileImage = 1 - tweets$userDefaultProfileImage
# tweets$messageMentionsCount    = tweets$messageMentionsCount * -1
tweets$userTweetsPerDay        = tweets$userTweetsPerDay * -1
tweets$userStatusesCount       = tweets$userStatusesCount * -1
tweets$userFriendFollowRatio   = tweets$userFriendFollowRatio * -1
#tweets$messageWordsCount       = tweets$messageWordsCount * -1
tweets$reach                   = (tweetsRaw$messageIsDirect) * tweets$messageMentionsCount + (1 - tweetsRaw$messageIsDirect) * (tweets$userFollowersCount)
head(tweets)
tweets[,1:4]
plot(tweets[,1:4])
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
tweetsModes = rep("A", 11)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
# summarized results
plot(tweetsPls)
plot(tweetsPls, what="loadings")
plot(tweetsPls, what="weights")
plot(tweetsPls, what="loadings")
plot(tweetsPls, what="weights")
plot(tweetsPls, what="loadings")
plot(tweetsPls)
tweetsPls$crossloadings
amplifyImpact_cols = c(1:4);
amplifyImpact_cols = c(1,4);
innerplot(tweetsInner)
tweetsModes = rep("A", 19)
tweetsModes = rep("A", 9)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
summary(tweetsPls)
UserEngagement     = c(0, 0, 0, 0, 0, 0, 0, 0);
UserActivity       = c(0, 0, 0, 0, 0, 0, 0, 0);
MessageExtension   = c(0, 0, 0, 0, 0, 0, 0, 0);
UserInteraction    = c(0, 0, 0, 0, 0, 0, 0, 0);
MessagewithMedia   = c(0, 0, 0, 0, 0, 0, 0, 0);
UserAudience       = c(0, 0, 0, 0, 0, 0, 0, 0);
AmplifyImpact      = c(1, 1, 1, 1, 1, 1, 0, 0);
ActionImpact       = c(1, 1, 1, 1, 1, 1, 1, 0);
# Matrix created by row binding
tweetsInner = rbind(UserEngagement, UserActivity, MessageExtension, UserInteraction, MessagewithMedia, UserAudience, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
tweetsOuter = list(userEngagement_cols, userActivity_cols, messageExtension_cols, userInteraction_cols, messagewithMedia_cols, userAudience_cols, amplifyImpact_cols, actionImpact_cols)
tweetsModes = rep("A", 8)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
tweetsPls$gof
# summarized results
summary(tweetsPls)
plot(tweetsPls)
UserEngagement     = c(0, 0, 0, 0, 0, 0, 0);
UserActivity       = c(0, 0, 0, 0, 0, 0, 0);
UserInteraction    = c(0, 0, 0, 0, 0, 0, 0);
MessagewithMedia   = c(0, 0, 0, 0, 0, 0, 0);
UserAudience       = c(0, 0, 0, 0, 0, 0, 0);
AmplifyImpact      = c(1, 1, 1, 1, 1, 0, 0);
ActionImpact       = c(1, 1, 1, 1, 1, 1, 0);
# Matrix created by row binding
tweetsInner = rbind(UserEngagement, UserActivity, MessageExtension, UserInteraction, MessagewithMedia, UserAudience, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
tweetsOuter = list(userEngagement_cols, userActivity_cols, messageExtension_cols, userInteraction_cols, messagewithMedia_cols, userAudience_cols, amplifyImpact_cols, actionImpact_cols)
tweetsModes = rep("A", 8)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
tweetsPls$gof
tweetsInner = rbind(UserEngagement, UserActivity, UserInteraction, MessagewithMedia, UserAudience, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
tweetsOuter = list(userEngagement_cols, userActivity_cols, userInteraction_cols, messagewithMedia_cols, userAudience_cols, amplifyImpact_cols, actionImpact_cols)
tweetsModes = rep("A", 7)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
tweetsPls$gof
# summarized results
summary(tweetsPls)
# Show results
tweetsPls$path_coefs
tweetsPls$inner_model
tweetsPls$inner_summary
plot(tweetsPls)
tweetsPls$crossloadings
amplifyImpact_cols = c(1:4);
amplifyImpact_cols = c(1:4);
UserEngagement     = c(0, 0, 0, 0, 0, 0);
UserActivity       = c(0, 0, 0, 0, 0, 0);
UserInteraction    = c(0, 0, 0, 0, 0, 0);
MessagewithMedia   = c(0, 0, 0, 0, 0, 0);
UserAudience       = c(0, 0, 0, 0, 0, 0);
AmplifyImpact      = c(1, 1, 1, 1, 1, 0);
tweetsInner = rbind(UserEngagement, UserActivity, UserInteraction, MessagewithMedia, UserAudience, AmplifyImpact)
colnames(tweetsInner) = rownames(tweetsInner)
tweetsOuter = list(userEngagement_cols, userActivity_cols, userInteraction_cols, messagewithMedia_cols, userAudience_cols, amplifyImpact_cols)
tweetsModes = rep("A", 7)
tweetsModes = rep("A", 6)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
tweetsPls$gof
summary(tweetsPls)
tweetsPls$path_coefs
tweetsPls$inner_model
tweetsPls$inner_summary
plot(tweetsPls)
tweetsPls$crossloadings
environment_cols   = c(27);
amplifyImpact_cols = c(1,4);
actionImpact_cols  = c(2:3);
# Build the model
UserEngagement     = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserActivity       = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
MessageExtension   = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserInteraction    = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
MessagewithMedia   = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserAudience       = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
Environment        = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
AmplifyImpact      = c(1, 1, 1, 1, 1, 1, 1, 0, 0);
ActionImpact       = c(1, 1, 1, 1, 1, 1, 1, 1, 0);
# Matrix created by row binding
tweetsInner = rbind(UserEngagement, UserActivity, MessageExtension, UserInteraction, MessagewithMedia, UserAudience, Environment, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(userEngagement_cols, userActivity_cols, messageExtension_cols, userInteraction_cols, messagewithMedia_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
# Tell variables are reflexive or formative
tweetsModes = rep("A", 9)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
plot(tweetsPls)
tweetsRaw = read.csv("./data/tweetsSummary_v3kloutScore.csv")
tweets = subset(tweetsRaw, select=-c(id, twitterIdStr, messageHasMedia, messageIsDirect, postHourOfDay, postDayOfWeek))
# Normalizagin data (Inverting data where higher is worst)
tweets$userDefaultProfile      = 1 - tweets$userDefaultProfile
tweets$userDefaultProfileImage = 1 - tweets$userDefaultProfileImage
# tweets$messageMentionsCount    = tweets$messageMentionsCount * -1
tweets$userTweetsPerDay        = tweets$userTweetsPerDay * -1
tweets$userStatusesCount       = tweets$userStatusesCount * -1
tweets$userFriendFollowRatio   = tweets$userFriendFollowRatio * -1
#tweets$messageWordsCount       = tweets$messageWordsCount * -1
tweets$reach                   = (tweetsRaw$messageIsDirect) * tweets$messageMentionsCount + (1 - tweetsRaw$messageIsDirect) * (tweets$userFollowersCount)
head(tweets)
help(prcomp)
tweetsPca = prcomp(tweets[5:28], center = TRUE, scale. = TRUE)
names(tweets)
tweetsPca = prcomp(tweets[5:30], center = TRUE, scale. = TRUE)
tweetsPca$rotation
tweetsPca = prcomp(tweets[1:30], center = TRUE, scale. = TRUE)
tweetsPca$rotation
tweetsRotationAbs = abs(tweetsPca$rotation)
tweetsRotationAbs
plot(tweetsPca, type = "l")
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
# 1: userListedCount, userFollowersCount
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userAudience_cols = c(15,13,28);
plot(nipals(tweets[,userAudience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
names(tweets)
tweets = subset(tweetsRaw, select=-c(id, userIdStr, twitterIdStr, messageHasMedia, messageIsDirect, postHourOfDay, postDayOfWeek))
# Normalizagin data (Inverting data where higher is worst)
tweets$userDefaultProfile      = 1 - tweets$userDefaultProfile
tweets$userDefaultProfileImage = 1 - tweets$userDefaultProfileImage
tweets$userTweetsPerDay        = tweets$userTweetsPerDay * -1
tweets$userStatusesCount       = tweets$userStatusesCount * -1
tweets$userFriendFollowRatio   = tweets$userFriendFollowRatio * -1
tweets$reach                   = (tweetsRaw$messageIsDirect) * tweets$messageMentionsCount + (1 - tweetsRaw$messageIsDirect) * (tweets$userFollowersCount)
head(tweets)
tweetsPca = prcomp(tweets[1:29], center = TRUE, scale. = TRUE)
tweetsPca$rotation
tweetsRotationAbs = abs(tweetsPca$rotation)
tweetsRotationAbs
plot(tweetsPca, type = "l")
names(tweets)
userAudience_cols = c(14,16,29);
plot(nipals(tweets[,userAudience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userEngagement_cols = c(19,23);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
plot(tweetsPca, type = "l")
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC5"]),5]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userEngagement_cols = c(19,23);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userEngagement_cols = c(13,20,24);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC2"]),2]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC4"]),4]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC4"]),4]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userEngagement_cols = c(13,20,24);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
names(tweets)
userEngagement_cols = c(13,24);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC4"]),4]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC5"]),5]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC2"]),2]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC4"]),4]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC5"]),5]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC6"]),6]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC7"]),7]
environment_cols   = c(27);
amplifyImpact_cols = c(1,4);
actionImpact_cols  = c(2:3);
# Build the model
UserEngagement     = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserActivity       = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
MessageExtension   = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserInteraction    = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
MessagewithMedia   = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserAudience       = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
Environment        = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
AmplifyImpact      = c(1, 1, 1, 1, 1, 1, 1, 0, 0);
ActionImpact       = c(1, 1, 1, 1, 1, 1, 1, 1, 0);
# Matrix created by row binding
tweetsInner = rbind(UserEngagement, UserActivity, MessageExtension, UserInteraction, MessagewithMedia, UserAudience, Environment, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(userEngagement_cols, userActivity_cols, messageExtension_cols, userInteraction_cols, messagewithMedia_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
# Tell variables are reflexive or formative
tweetsModes = rep("A", 9)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
# summarized results
summary(tweetsPls)
# Show results
tweetsPls$path_coefs
tweetsPls$inner_model
tweetsPls$inner_summary
plot(tweetsPls)
tweetsPls$crossloadings
plot(tweetsPls, what="loadings")
plot(tweetsPls, what="weights")
# Unidimensionallity
tweetsPls$unidim
#  Alphas must be higher than 0.7 to be acceotable (rule of thumb)
tweetsPls$unidim[, 3, drop = FALSE]
# Loadings and communalities
# communality must be higher than 0.7 (comes form 0.7^2 = 50% of variance)
tweetsPls$outer_model
tweetsPls$crossloadings
plot(tweetsPls)
tweetsPls$path_coefs
plot(tweetsPls, what="loadings")
plot(tweetsPls, what="weights")
plot(tweetsPls, what="loadings")
tweetsRaw = read.csv("./data/tweetsSummary_v3.1withImpact.csv")
# Filter useless data
tweets = subset(tweetsRaw, select=-c(id, userIdStr, twitterIdStr, messageHasMedia, messageIsDirect, postHourOfDay, postDayOfWeek))
# Normalizagin data (Inverting data where higher is worst)
tweets$userDefaultProfile      = 1 - tweets$userDefaultProfile
tweets$userDefaultProfileImage = 1 - tweets$userDefaultProfileImage
tweets$userTweetsPerDay        = tweets$userTweetsPerDay * -1
tweets$userStatusesCount       = tweets$userStatusesCount * -1
tweets$userFriendFollowRatio   = tweets$userFriendFollowRatio * -1
tweets$reach                   = (tweetsRaw$messageIsDirect) * tweets$messageMentionsCount + (1 - tweetsRaw$messageIsDirect) * (tweets$userFollowersCount)
head(tweets)
tweetsInner = rbind(UserEngagement, UserActivity, MessageExtension, UserInteraction, MessagewithMedia, UserAudience, Environment, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(userEngagement_cols, userActivity_cols, messageExtension_cols, userInteraction_cols, messagewithMedia_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
# Tell variables are reflexive or formative
tweetsModes = rep("A", 9)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
# summarized results
summary(tweetsPls)
plot(tweetsPls)
tweetsRaw = read.csv("./data/tweetsSummary_v3kloutScore.csv")
# Filter useless data
tweets = subset(tweetsRaw, select=-c(id, userIdStr, twitterIdStr, messageHasMedia, messageIsDirect, postHourOfDay, postDayOfWeek))
# Normalizagin data (Inverting data where higher is worst)
tweets$userDefaultProfile      = 1 - tweets$userDefaultProfile
tweets$userDefaultProfileImage = 1 - tweets$userDefaultProfileImage
tweets$userTweetsPerDay        = tweets$userTweetsPerDay * -1
tweets$userStatusesCount       = tweets$userStatusesCount * -1
tweets$userFriendFollowRatio   = tweets$userFriendFollowRatio * -1
tweets$reach                   = (tweetsRaw$messageIsDirect) * tweets$messageMentionsCount + (1 - tweetsRaw$messageIsDirect) * (tweets$userFollowersCount)
head(tweets)
tweets[,1:4]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
setwd("/Users/manuelmhtr/Projects/Learning-R/ViralImpact");
list.files("./data")
tweetsRaw = read.csv("./data/tweetsSummary_v3kloutScore.csv")
# Filter useless data
tweets = subset(tweetsRaw, select=-c(id, userIdStr, twitterIdStr, messageHasMedia, messageIsDirect, postHourOfDay, postDayOfWeek))
# Normalizagin data (Inverting data where higher is worst)
tweets$userDefaultProfile      = 1 - tweets$userDefaultProfile
tweets$userDefaultProfileImage = 1 - tweets$userDefaultProfileImage
tweets$userTweetsPerDay        = tweets$userTweetsPerDay * -1
tweets$userStatusesCount       = tweets$userStatusesCount * -1
tweets$userFriendFollowRatio   = tweets$userFriendFollowRatio * -1
tweets$messageReach            = (tweetsRaw$messageIsDirect) * tweets$messageMentionsCount + (1 - tweetsRaw$messageIsDirect) * (tweets$userFollowersCount)
head(tweets)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userAudience_cols = c(14,16,29);
plot(nipals(tweets[,userAudience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userAudience_cols = c(14,16,29);
plot(nipals(tweets[,userAudience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
# 1.2: userAccount Age, userVerified, kloutScore, userFollowFriendRatio
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userEngagement_cols = c(13,20,24);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
# 2: messageHasLocation, messageIsSensitive
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC2"]),2]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userAudience_cols = c(14,16,29);
plot(nipals(tweets[,userAudience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
# 1.2: userAccount Age, userVerified, kloutScore, userFollowFriendRatio
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userEngagement_cols = c(13,20,24);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
# 2: messageHasLocation, messageIsSensitive
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC2"]),2]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
names(tweets)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
userActivity_cols = c(25, 18);
plot(nipals(tweets[,userActivity_cols]), main = "User Activity indicators (circle of correlations)", cex.main = 1)
names(tweets)
environment_cols   = c(28);
amplifyImpact_cols = c(1,4);
actionImpact_cols  = c(2:3);
# Build the model
UserEngagement     = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserActivity       = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
MessageExtension   = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserInteraction    = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
MessagewithMedia   = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
UserAudience       = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
Environment        = c(0, 0, 0, 0, 0, 0, 0, 0, 0);
AmplifyImpact      = c(1, 1, 1, 1, 1, 1, 1, 0, 0);
ActionImpact       = c(1, 1, 1, 1, 1, 1, 1, 1, 0);
# Matrix created by row binding
tweetsInner = rbind(UserEngagement, UserActivity, MessageExtension, UserInteraction, MessagewithMedia, UserAudience, Environment, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(userEngagement_cols, userActivity_cols, messageExtension_cols, userInteraction_cols, messagewithMedia_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
# Tell variables are reflexive or formative
tweetsModes = rep("A", 9)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
# summarized results
summary(tweetsPls)
# Show results
tweetsPls$path_coefs
tweetsPls$inner_model
tweetsPls$inner_summary
plot(tweetsPls)
names(tweets)
userAudience_cols = c(13,14,29);
plot(nipals(tweets[,userAudience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userAudience_cols = c(14,16,29);
plot(nipals(tweets[,userAudience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userEngagement_cols = c(13,20,24,14);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
userEngagement_cols = c(13,20,24,26);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
userActivity_cols = c(25,18,27);
plot(nipals(tweets[,userActivity_cols]), main = "User Activity indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC4"]),4]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC6"]),6]
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC6"]),6]
messagewithMedia_cols = c(12,9);
plot(nipals(tweets[,messagewithMedia_cols]), main = "Message With Media indicators (circle of correlations)", cex.main = 1)
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC7"]),7]
userInteraction_cols = c(17,15);
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userAudience_cols = c(14,16,29);
plot(nipals(tweets[,userAudience_cols]), main = "Audience indicators (circle of correlations)", cex.main = 1)
# 1.2: userAccount Age, userVerified, kloutScore, userFollowFriendRatio
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC1"]),1]
userEngagement_cols = c(13,20,24,26);
plot(nipals(tweets[,userEngagement_cols]), main = "User Engagement indicators (circle of correlations)", cex.main = 1)
# 2: messageHasLocation, messageIsSensitive
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC2"]),2]
messageSensitive_cols = c(5,6);
plot(nipals(tweets[,messageSensitive_cols]), main = "Message Sensitive indicators (circle of correlations)", cex.main = 1)
# 3: userTweetsPerDay, userStatusesCount, userFriendFollowRatio
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC3"]),3]
userActivity_cols = c(25,18,27);
plot(nipals(tweets[,userActivity_cols]), main = "User Activity indicators (circle of correlations)", cex.main = 1)
# 3: messageTextLength, messageWordsCount
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC4"]),4]
messageExtension_cols = c(7, 8);
plot(nipals(tweets[,messageExtension_cols]), main = "Message Extension indicators (circle of correlations)", cex.main = 1)
# 5: /*userStatusesCount,*/ userHasLocation, userDescriptionLength
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC5"]),5]
userCommitment_cols = c(20, 18);
plot(nipals(tweets[,userCommitment_cols]), main = "User Commitment indicators (circle of correlations)", cex.main = 1)
# 6: messageMediaCount, messageHashtagsCount
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC6"]),6]
messagewithMedia_cols = c(12,9);
plot(nipals(tweets[,messagewithMedia_cols]), main = "Message With Media indicators (circle of correlations)", cex.main = 1)
# 7: userFavoritesCount, userFriendsCount
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC7"]),7]
userInteraction_cols = c(17,15);
plot(nipals(tweets[,userInteraction_cols]), main = "User Interaction indicators (circle of correlations)", cex.main = 1)
# 8: messageIsDirect, messageMentionsCount
#tweetsRotationAbs[order(-tweetsRotationAbs[,"PC8"]),8]
#messageInteraction_cols = c(6,11);
environment_cols   = c(28);
amplifyImpact_cols = c(1,4);
actionImpact_cols  = c(2:3);
tweetsRotationAbs[order(-tweetsRotationAbs[,"PC6"]),6]
messageContent_cols = c(12,9);
plot(nipals(tweets[,messageContent_cols]), main = "Message With Media indicators (circle of correlations)", cex.main = 1)
v
v
v
v
v
v
tweetsInner = rbind(UserEngagement, UserActivity, MessageExtension, UserInteraction, MessageContent, UserAudience, Environment, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(userEngagement_cols, userActivity_cols, messageExtension_cols, userInteraction_cols, MessageContent_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
# Tell variables are reflexive or formative
tweetsOuter = list(userEngagement_cols, userActivity_cols, messageExtension_cols, userInteraction_cols, messageContent_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
UserEngagement     = c(0, 0, 0, 0, 0, 0, 0, 0);
UserActivity       = c(0, 0, 0, 0, 0, 0, 0, 0);
UserInteraction    = c(0, 0, 0, 0, 0, 0, 0, 0);
MessageContent     = c(0, 0, 0, 0, 0, 0, 0, 0);
UserAudience       = c(0, 0, 0, 0, 0, 0, 0, 0);
Environment        = c(0, 0, 0, 0, 0, 0, 0, 0);
AmplifyImpact      = c(1, 1, 1, 1, 1, 1, 0, 0);
ActionImpact       = c(1, 1, 1, 1, 1, 1, 1, 0);
tweetsInner = rbind(UserEngagement, UserActivity, MessageExtension, UserInteraction, MessageContent, UserAudience, Environment, AmplifyImpact, ActionImpact)
tweetsInner = rbind(UserEngagement, UserActivity, UserInteraction, MessageContent, UserAudience, Environment, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(userEngagement_cols, userActivity_cols, userInteraction_cols, messageContent_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
tweetsModes = rep("A", 8)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
tweetsRaw = read.csv("./data/tweetsSummary_v3kloutScore.csv")
# Filter useless data
tweets = subset(tweetsRaw, select=-c(id, userIdStr, twitterIdStr, messageHasMedia, messageIsDirect, postHourOfDay, postDayOfWeek))
# Normalizagin data (Inverting data where higher is worst)
tweets$userDefaultProfile      = 1 - tweets$userDefaultProfile
tweets$userDefaultProfileImage = 1 - tweets$userDefaultProfileImage
tweets$userTweetsPerDay        = tweets$userTweetsPerDay * -1
tweets$userStatusesCount       = tweets$userStatusesCount * -1
tweets$userFriendFollowRatio   = tweets$userFriendFollowRatio * -1
tweets$messageReach            = (tweetsRaw$messageIsDirect) * tweets$messageMentionsCount + (1 - tweetsRaw$messageIsDirect) * (tweets$userFollowersCount)
head(tweets)
tweets[,1:4]
#plot(tweets[,1:4])
tweetsInner = rbind(UserEngagement, UserActivity, UserInteraction, MessageContent, UserAudience, Environment, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(userEngagement_cols, userActivity_cols, userInteraction_cols, messageContent_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
# Tell variables are reflexive or formative
tweetsModes = rep("A", 8)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
plot(tweetsPls)
plot(tweetsPls, what="loadings")
plot(tweetsPls, what="weights")
plot(tweetsPls, what="loadings")
plot(tweetsPls, what="weights")
names(tweets)
messageContent_cols = c(12);
tweetsInner = rbind(UserEngagement, UserActivity, UserInteraction, MessageContent, UserAudience, Environment, AmplifyImpact, ActionImpact)
colnames(tweetsInner) = rownames(tweetsInner)
# plot the inner matrix
innerplot(tweetsInner)
# define list of indicators
tweetsOuter = list(userEngagement_cols, userActivity_cols, userInteraction_cols, messageContent_cols, userAudience_cols, environment_cols, amplifyImpact_cols, actionImpact_cols)
# Tell variables are reflexive or formative
tweetsModes = rep("A", 8)
tweetsPls = plspm(tweets, tweetsInner, tweetsOuter, tweetsModes, maxiter=200)
# Goodness of fit (should be higher than 0.70)
tweetsPls$gof
tweetsPls$crossloadings
tweetsPls$inner_summary
plot(tweetsPls)
tweetsPls$crossloadings
plot(tweetsPls, what="loadings")
plot(tweetsPls, what="weights")
