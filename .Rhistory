mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
# Build linear model
errorsLm = lm(errors ~ c(1:length(errors)))
data$coefA = errorsLm$coefficients[[1]];
data$coefB = errorsLm$coefficients[[2]];
# Plots
hist(errors, breaks=100)
?boxplot
boxplot(data.frame(e=errors, s=stdErrors))
boxplot(errors)
summary(errors)
length(errors)
# Plot data and linear model
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
# Plot Neural Network Error
library("RMySQL");
db <- dbConnect(RMySQL::MySQL(), user='root', password='', dbname='viral_development', host='127.0.0.1')
#dbSendQuery(db, "UPDATE stats_raw set predictedClicksRatio = NULL, predictedRetweetsRatio = NULL, predictedFavoritesRatio = NULL, predictedImpactRatio = NULL WHERE 1");
# Control test
#result <- dbSendQuery(db, "SELECT actualRetweetsRatio, actualFavoritesRatio, actualClicksRatio, actualImpactRatio FROM stats_raw WHERE 1 LIMIT 100000");
#controlData = dbFetch(result, n=-1)
#controlData$avgImpact  = controlData$actualRetweetsRatio + controlData$actualFavoritesRatio + controlData$actualClicksRatio
#meanAvgImpact          = mean(controlData$avgImpact)
#controlData$stdError   = (controlData$avgImpact - meanAvgImpact)
#errors  = controlData$stdError;
#results = controlData$avgImpact;
# Regular Neural network test
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
data$totalError = sum(errors);
data$meanError  = mean(errors);
data$maxError   = max(errors);
data$minError   = min(errors);
data$success    = length(errors[errors < 0.25]);
data$successPer = data$success / length(errors);
print(data);
# Build linear model
errorsLm = lm(errors ~ c(1:length(errors)))
data$coefA = errorsLm$coefficients[[1]];
data$coefB = errorsLm$coefficients[[2]];
# Plots
hist(errors, breaks=100)
?boxplot
boxplot(data.frame(e=errors, s=stdErrors))
boxplot(errors)
summary(errors)
length(errors)
# Plot data and linear model
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
#plot(errors, type="o", col="#00000033", ylim=c(0, 7));
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
data$totalError = sum(errors);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
#plot(errors, type="o", col="#00000033", ylim=c(0, 7));
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
data$totalError = sum(errors);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
#plot(errors, type="o", col="#00000033", ylim=c(0, 7));
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
data$totalError = sum(errors);
data$meanError  = mean(errors);
data$maxError   = max(errors);
data$minError   = min(errors);
# Plot data and linear model
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
# Regular Neural network test
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
par(mfrow=c(1,2), mar=c(5,5,1,1));
?par
controlError       = meanError^2;
neuralNetworkError = dbData$predictionError^2;
plot(controlError, type="o", col="#00000033", ylim=c(0, 7));
plot(neuralNetworkError, type="o", col="#00000033", ylim=c(0, 7));
print(data);
library("RMySQL");
db <- dbConnect(RMySQL::MySQL(), user='root', password='', dbname='viral_development', host='127.0.0.1')
result <- dbSendQuery(db, "SELECT id, actualClicksRatio, actualRetweetsRatio, actualFavoritesRatio, predictionError FROM stats_raw WHERE predictionError != -1 LIMIT 100000");
dbData  = dbFetch(result, n=-1);
mean(dbData$actualClicksRatio)
mean(dbData$actualRetweetsRatio)
mean(dbData$actualFavoritesRatio)
# Control errors
controlPrediction = data.frame(mean(dbData$actualClicksRatio), mean(dbData$actualRetweetsRatio), mean(dbData$actualFavoritesRatio));
names(controlPrediction) = c("clicks", "retweets", "favorites")
meanError = c();
for (i in c(1:dim(dbData)[1])) {
currentError = abs(dbData[i,]$actualClicksRatio    - controlPrediction$clicks);
currentError = currentError + abs(dbData[i,]$actualRetweetsRatio  - controlPrediction$retweets);
currentError = currentError + abs(dbData[i,]$actualFavoritesRatio - controlPrediction$favorites);
meanError    = c(meanError, currentError);
}
errors = meanError;
# Prediction errors
errors = dbData$predictionError;
# Show summary
summary(errors);
summary(results);
# Init vars
data = c();
data$mad = mean(abs(errors));
data$mse = mean(errors^2);
data$Emin = sum(errors^2) / 2;
data$sse = sum(errors^2);
data$maxError = max(errors^2);
print(data);
